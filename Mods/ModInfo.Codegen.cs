using System;
using System.Collections.Generic;
using System.IO;
using CodegenCS;
using Exanite.Core.Properties;
using Sirenix.OdinInspector;
using UnityEditor;
using Object = UnityEngine.Object;

namespace CodeName.Modding.Mods
{
    public partial class ModInfo
    {
#if UNITY_EDITOR
        [BoxGroup(CodegenGroup)]
        [Button]
        public void UpdateResourceList()
        {
            var assetGuids = AssetDatabase.FindAssets("", new[]
            {
                GetModContentPath(),
            });

            var assetInfos = new List<AssetInfo>(assetGuids.Length);
            foreach (var assetGuid in assetGuids)
            {
                var assetPath = AssetDatabase.GUIDToAssetPath(assetGuid);
                var modAssetKey = ConvertToModAssetKey(assetPath);

                var asset = AssetDatabase.LoadMainAssetAtPath(assetPath);
                assetInfos.Add(new AssetInfo(asset, modAssetKey));

                foreach (var subAsset in AssetDatabase.LoadAllAssetRepresentationsAtPath(assetPath))
                {
                    assetInfos.Add(new AssetInfo(subAsset, $"{modAssetKey}[{subAsset.name}]"));
                }
            }

            PopulateResources(assetInfos);

            EditorUtility.SetDirty(this);
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
        }

        [BoxGroup(CodegenGroup)]
        [Button]
        public void UpdateResourceListAndGenerateCode()
        {
            UpdateResourceList();
            GenerateClass();
        }

        private void PopulateResources(List<AssetInfo> assetInfos)
        {
            var overrides = new HashSet<Object>();
            for (var i = resources.Count - 1; i >= 0; i--)
            {
                var resource = resources[i];
                if (resource.IsOverride)
                {
                    overrides.Add(resource.Asset);

                    continue;
                }

                resources.RemoveAt(i);
            }

            foreach (var assetInfo in assetInfos)
            {
                if (overrides.Contains(assetInfo.Asset))
                {
                    continue;
                }

                switch (assetInfo.Asset)
                {
                    case DefaultAsset:
                    case MonoScript:
                    {
                        break;
                    }
                    default:
                    {
                        resources.Add(new ModResource(assetInfo.Key, assetInfo.Asset));

                        break;
                    }
                }
            }

            resources.Sort((left, right) =>
            {
                if (left.IsOverride && !right.IsOverride)
                {
                    return -1;
                }

                return string.Compare(left.Key, right.Key, StringComparison.Ordinal);
            });
        }

        [BoxGroup(CodegenGroup)]
        private void GenerateClass()
        {
            using var writer = new CodegenTextWriter(Path.Combine(GetModPath(), $"{Id}.Generated.cs"));

            var overrides = new Dictionary<string, List<ModResource>>();

            writer.WriteLine("// <auto-generated/>");

            using (writer.WithCBlock($"namespace {GeneratedNamespace}"))
            using (writer.WithCBlock($"public static partial class {Id}"))
            {
                writer.WriteLine($"public static string ModId {{ get; }} = \"{Id}\";");
                writer.WriteLine();

                using (writer.WithCBlock("public static partial class Resources"))
                {
                    foreach (var resource in resources)
                    {
                        var modId = new ResourceKey(resource.Key).GetModId();
                        if (modId != Id)
                        {
                            if (!overrides.TryGetValue(modId, out var overridenResources))
                            {
                                overridenResources = new List<ModResource>();

                                overrides.Add(modId, overridenResources);
                            }

                            overridenResources.Add(resource);

                            continue;
                        }

                        WriteResourceKeyProperty(writer, resource, modId);
                    }
                }

                writer.WriteLine();
                writer.WriteLine();
                using (writer.WithCBlock("public static partial class Overrides"))
                {
                    var isFirst = true;

                    foreach (var (modId, overridenResources) in overrides)
                    {
                        if (!isFirst)
                        {
                            writer.WriteLine();
                            writer.WriteLine();
                        }

                        isFirst = false;

                        using (writer.WithCBlock($"public static partial class {modId}"))
                        {
                            foreach (var overridenResource in overridenResources)
                            {
                                WriteResourceKeyProperty(writer, overridenResource, modId);
                            }
                        }
                    }
                }
            }

            AssetDatabase.Refresh();
        }

        private void WriteResourceKeyProperty(CodegenTextWriter writer, ModResource resource, string modId)
        {
            var key = resource.Key;
            key = key.Substring(modId.Length);
            key = ResourceKey.Regexes.ReplaceCsharpUnsafeCharacters.Replace(key, "_").Trim('_');

            writer.WriteLine($"public static global::{typeof(PropertyDefinition)}<global::{resource.Asset.GetType()}> {key} {{ get; }} = new(\"{resource.Key}\");");
        }

        private string ConvertToModAssetKey(string assetPath)
        {
            // Remove entire file extension, including cases where a file has "multiple extensions".
            // Eg: 'file.ext1.ext2' should become 'file'
            var assetName = Path.GetFileName(assetPath);
            var firstPeriodIndex = assetName.IndexOf('.');
            if (firstPeriodIndex >= 0)
            {
                assetName = assetName.Substring(0, firstPeriodIndex);
            }

            assetPath = assetPath.Substring(GetModContentPath().Length + 1);
            assetPath = Path.Combine(Path.GetDirectoryName(assetPath) ?? "", assetName);
            assetPath = assetPath.Replace("\\", "/");

            return $"{Id}:{assetPath}";
        }

        private string GetModContentPath()
        {
            return Path.Join(GetModPath(), contentFolderPath);
        }

        private class AssetInfo
        {
            public AssetInfo(Object asset, string key)
            {
                Asset = asset;
                Key = key;
            }

            public Object Asset { get; }
            public string Key { get; }
        }
#endif
    }
}
